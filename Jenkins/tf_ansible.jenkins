#!groovy
// Run TF

properties([disableConcurrentBuilds()])

pipeline {
  agent any

  options {
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
      timestamps()
  }

  environment {
    CLOUDFLARE_TOKEN = credentials('cloudflare')
  }

  stages {

    stage('TF Init&Plan') {
      steps {
        withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-1']) {
        dir ("Terraform") {
        sh '''
          export CLOUDFLARE_API_KEY=$CLOUDFLARE_TOKEN
          terraform init -no-color
          terraform plan -no-color
        '''
      }
        }
      }
    }

    stage('TF Apply Approval') {
  steps {
    script {
      def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
    }
  }
}

    stage('TF Apply') {
      steps {
        withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-1']) {
        dir ("Terraform") {
        sh '''
          export CLOUDFLARE_API_KEY=$CLOUDFLARE_TOKEN
          terraform apply -auto-approve -no-color
        '''
      }
        }
     }
    }

    stage('Ansible Approval') {
  steps {
    script {
      def userInput = input(id: 'confirm', message: 'Apply Ansible-playbook?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply ansible-playbook', name: 'confirm'] ])
    }
  }
}

    stage('Ansible') {
      steps {
        withAWS([credentials: 'jenkins-aws-credentials', region: 'eu-west-1']) {
        dir ("Terraform") {
        sh '''
          terraform output -json bastion_ip | jq -r
          ssh -T -i ~/.ssh/ida_rsa -o StrictHostKeyChecking=no ec2-user@$(terraform output -json bastion_ip | jq -r) "
          cd /home/ec2-user/ansible/ansible;
          ansible-galaxy collection install amazon.aws;
          pip3 install --user boto3;
          ansible-playbook -i inventory_aws_ec2.yml playbook.yml
          "
        '''
      }
        }
      }
    }
  }
}
